local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Test",
   LoadingTitle = "Test",
   LoadingSubtitle = "by Swayzy",
   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },
   Discord = {
      Enabled = true,
      Invite = "CjDem9dV", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = false -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Key",
      Subtitle = "Key System",
      Note = "Join the discord to get access",
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("Farming", nil) -- Title, Image
local MainSection = MainTab:CreateSection("Main")

Rayfield:Notify({
   Title = "You executed the script",
   Content = "Test",
   Duration = 3,
   Image = nil,
   Actions = { -- Notification Buttons
      Ignore = {
         Name = "Okay!",
         Callback = function()
         print("The user tapped Okay!")
      end
   },
},
})

local autoTapEnabled = false  -- Flag to control auto tap state

local DELAY = 0.01

-- Function to start auto tap
local function startAutoTap()
    task.spawn(function()
        while autoTapEnabled do
            game:GetService("ReplicatedStorage").Remotes.Clicker:FireServer()
            task.wait(DELAY)
        end
    end)
end

-- Function to stop auto tap
local function stopAutoTap()
    autoTapEnabled = false
end

-- Create the toggle button
local Toggle = MainTab:CreateToggle({
    Name = "Auto Tap",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        autoTapEnabled = Value
        if autoTapEnabled then
            startAutoTap()
        else
            stopAutoTap()
        end
    end,
})


local autoRebirthEnabled = false  -- Flag to control auto rebirth state

local DELAY = 0.01

-- Function to start auto rebirth
local function startAutoRebirth()
    task.spawn(function()
        while autoRebirthEnabled do
            game:GetService("ReplicatedStorage").Remotes.Rebirth:FireServer()
            task.wait(DELAY)
        end
    end)
end

-- Function to stop auto rebirth
local function stopAutoRebirth()
    autoRebirthEnabled = false
end

-- Create the toggle button
local Toggle = MainTab:CreateToggle({
    Name = "Auto Rebirth",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        autoRebirthEnabled = Value
        if autoRebirthEnabled then
            startAutoRebirth()
        else
            stopAutoRebirth()
        end
    end,
})
